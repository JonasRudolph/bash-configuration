#!/bin/bash
#################### Create function to calculate absolute path of parent directory of a file
# We can't create a function file for this because for sourcing function files we need no be able
# to calculate the path to them.
alias jr_doc_funct_get_absolute_path_of_parent_directory="echo \"
##########
# Calculates the absolute path of the parent directory of the given path.
# If the given path is relative, it is assumed, that it is relative to the current working directory
# Example: Get base-path of current script: \\\$(jr_funct_get_absolute_path_of_parent_directory \\\"\\\${BASH_SOURCE[0]}\\\")
#
# @param1 A (maybe relative) path to a file or directory
# @stdout Absolute path of the parent directory of the file or directory
##########\""
jr_funct_get_absolute_path_of_parent_directory(){
    local path="${1}"
    echo -n "$(cd "$(dirname "${path}")" && pwd)"
}
export -f jr_funct_get_absolute_path_of_parent_directory



#################### Calculate parent directory of this file
pathnameOfCurrentlyExecutingScript=${BASH_SOURCE[0]}
bashConfigurationRoot="$(jr_funct_get_absolute_path_of_parent_directory "${pathnameOfCurrentlyExecutingScript}")"



#################### Source base functions
source "${bashConfigurationRoot}/function/file_contains"
source "${bashConfigurationRoot}/function/copy_file_idempotent"
source "${bashConfigurationRoot}/function/append_idempotent"
source "${bashConfigurationRoot}/function/add_sourcing_of_file_to_other_file_idempotent"
source "${bashConfigurationRoot}/function/get_operating_system"
source "${bashConfigurationRoot}/function/is_bash_version_at_least"



#################### Idempotent setup 
# Create variables file if not present
if jr_funct_copy_file_idempotent "${bashConfigurationRoot}/default-variables" "${bashConfigurationRoot}/variables"; then
    echo "TODO: Created ${bashConfigurationRoot}/variables please override them"
fi

# Add sourcing of ~/.bashrc to ~/.bash_profile
if jr_funct_add_sourcing_of_file_to_other_file_idempotent ~/.bashrc ~/.bash_profile; then
    echo "Added sourcing of ~/.bashrc to ~/.bash_profile"
fi

# Add sourcing of itself to ~/.bashrc
pathToConfigureBash="${bashConfigurationRoot}/configure-bash"
if jr_funct_add_sourcing_of_file_to_other_file_idempotent "${pathToConfigureBash}" ~/.bashrc; then
    echo "Added sourcing of myself (${pathToConfigureBash}) to ~/.bashrc"
fi

# Install curl
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_debian}") which curl > /dev/null || sudo apt-get install -qq curl ;;
esac

# Install brew if macOs
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_macos}") which brew > /dev/null || /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" ;;
esac

# Install jq
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_debian}") which jq > /dev/null || sudo apt-get install -qq jq ;;
    "${jr_const_operating_system_macos}") which jq > /dev/null || brew install jq > /dev/null ;;
    *) echo "Error: Unknown operating system. Therefore installing of jq failed! Functions that depend on jq will not work." ;;
esac

# Upgrade bash
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_macos}") jr_funct_is_bash_version_at_least 4 0 0 || brew install bash ;;
esac

# Install/update [bash-completion](http://bash-completion.alioth.debian.org | http://davidalger.com/development/bash-completion-on-os-x-with-brew)
# Install/update [bash-sensible](https://github.com/mrzool/bash-sensible)



#################### Source variables
source "${bashConfigurationRoot}/variables"



#################### Source functions
source "${bashConfigurationRoot}/function/tar_create"
source "${bashConfigurationRoot}/function/list_files_containing"
source "${bashConfigurationRoot}/function/translate"
source "${bashConfigurationRoot}/function/git_create_branch"
source "${bashConfigurationRoot}/function/git_rename_branch_also_on_remote"
source "${bashConfigurationRoot}/function/git_undo_last_commit"
source "${bashConfigurationRoot}/function/git_get_current_branch"
source "${bashConfigurationRoot}/function/git_delete_branch_also_on_remote"
source "${bashConfigurationRoot}/function/count_objects_in_current_directory"



#################### Source shortcuts
source "${bashConfigurationRoot}/shortcuts"



#################### Source prompt
source "${bashConfigurationRoot}/prompt"
